// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	graceful "github.com/tylerb/graceful"

	"github.com/go-swagger/go-swagger/cmd/swagger/restapi/operations"
	"github.com/go-swagger/go-swagger/cmd/swagger/restapi/operations/album"
	"github.com/go-swagger/go-swagger/cmd/swagger/restapi/operations/book"
	"github.com/go-swagger/go-swagger/cmd/swagger/restapi/operations/user"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name  --spec ../swagger.json

func configureFlags(api *operations.TingtingAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.TingtingAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.BookNrCategoryListHandler = book.NrCategoryListHandlerFunc(func(params book.NrCategoryListParams) middleware.Responder {
		return middleware.NotImplemented("operation book.NrCategoryList has not yet been implemented")
	})
	api.AlbumAlbumBuyHandler = album.AlbumBuyHandlerFunc(func(params album.AlbumBuyParams) middleware.Responder {
		return middleware.NotImplemented("operation album.AlbumBuy has not yet been implemented")
	})
	api.AlbumAlbumListHandler = album.AlbumListHandlerFunc(func(params album.AlbumListParams) middleware.Responder {
		return middleware.NotImplemented("operation album.AlbumList has not yet been implemented")
	})
	api.AlbumAlbumMatchHandler = album.AlbumMatchHandlerFunc(func(params album.AlbumMatchParams) middleware.Responder {
		return middleware.NotImplemented("operation album.AlbumMatch has not yet been implemented")
	})
	api.UserBannerPostionHandler = user.BannerPostionHandlerFunc(func(params user.BannerPostionParams) middleware.Responder {
		return middleware.NotImplemented("operation user.BannerPostion has not yet been implemented")
	})
	api.BookBookDetailHandler = book.BookDetailHandlerFunc(func(params book.BookDetailParams) middleware.Responder {
		return middleware.NotImplemented("operation book.BookDetail has not yet been implemented")
	})
	api.BookBookListHandler = book.BookListHandlerFunc(func(params book.BookListParams) middleware.Responder {
		return middleware.NotImplemented("operation book.BookList has not yet been implemented")
	})
	api.BookBookMatchHandler = book.BookMatchHandlerFunc(func(params book.BookMatchParams) middleware.Responder {
		return middleware.NotImplemented("operation book.BookMatch has not yet been implemented")
	})
	api.UserChapterFavListHandler = user.ChapterFavListHandlerFunc(func(params user.ChapterFavListParams) middleware.Responder {
		return middleware.NotImplemented("operation user.ChapterFavList has not yet been implemented")
	})
	api.UserChapterHistoryListHandler = user.ChapterHistoryListHandlerFunc(func(params user.ChapterHistoryListParams) middleware.Responder {
		return middleware.NotImplemented("operation user.ChapterHistoryList has not yet been implemented")
	})
	api.BookChapterListHandler = book.ChapterListHandlerFunc(func(params book.ChapterListParams) middleware.Responder {
		return middleware.NotImplemented("operation book.ChapterList has not yet been implemented")
	})
	api.UserFeedbackHandler = user.FeedbackHandlerFunc(func(params user.FeedbackParams) middleware.Responder {
		return middleware.NotImplemented("operation user.Feedback has not yet been implemented")
	})
	api.UserFindPassEditPassHandler = user.FindPassEditPassHandlerFunc(func(params user.FindPassEditPassParams) middleware.Responder {
		return middleware.NotImplemented("operation user.FindPassEditPass has not yet been implemented")
	})
	api.UserFindPassSendSmsHandler = user.FindPassSendSmsHandlerFunc(func(params user.FindPassSendSmsParams) middleware.Responder {
		return middleware.NotImplemented("operation user.FindPassSendSms has not yet been implemented")
	})
	api.UserInitHandler = user.InitHandlerFunc(func(params user.InitParams) middleware.Responder {
		return middleware.NotImplemented("operation user.Init has not yet been implemented")
	})
	api.UserLoginHandler = user.LoginHandlerFunc(func(params user.LoginParams) middleware.Responder {
		return middleware.NotImplemented("operation user.Login has not yet been implemented")
	})
	api.UserMsgListHandler = user.MsgListHandlerFunc(func(params user.MsgListParams) middleware.Responder {
		return middleware.NotImplemented("operation user.MsgList has not yet been implemented")
	})
	api.UserRecommendPostionHandler = user.RecommendPostionHandlerFunc(func(params user.RecommendPostionParams) middleware.Responder {
		return middleware.NotImplemented("operation user.RecommendPostion has not yet been implemented")
	})
	api.UserRecordMyListHandler = user.RecordMyListHandlerFunc(func(params user.RecordMyListParams) middleware.Responder {
		return middleware.NotImplemented("operation user.RecordMyList has not yet been implemented")
	})
	api.UserRegisterHandler = user.RegisterHandlerFunc(func(params user.RegisterParams) middleware.Responder {
		return middleware.NotImplemented("operation user.Register has not yet been implemented")
	})
	api.UserReportErrHandler = user.ReportErrHandlerFunc(func(params user.ReportErrParams) middleware.Responder {
		return middleware.NotImplemented("operation user.ReportErr has not yet been implemented")
	})
	api.UserScanCodeHandler = user.ScanCodeHandlerFunc(func(params user.ScanCodeParams) middleware.Responder {
		return middleware.NotImplemented("operation user.ScanCode has not yet been implemented")
	})
	api.UserSearchHandler = user.SearchHandlerFunc(func(params user.SearchParams) middleware.Responder {
		return middleware.NotImplemented("operation user.Search has not yet been implemented")
	})
	api.UserUserRechargeHandler = user.UserRechargeHandlerFunc(func(params user.UserRechargeParams) middleware.Responder {
		return middleware.NotImplemented("operation user.UserRecharge has not yet been implemented")
	})
	api.UserUserUploadRecordHandler = user.UserUploadRecordHandlerFunc(func(params user.UserUploadRecordParams) middleware.Responder {
		return middleware.NotImplemented("operation user.UserUploadRecord has not yet been implemented")
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
